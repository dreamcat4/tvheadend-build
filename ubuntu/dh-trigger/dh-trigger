#!/bin/sh
# dh-trigger - trigger dockerhub automated builds

# Globals
[ "$dht_conf_root" ] || dht_conf_root="$HOME/.dh-trigger"
# dht_nossl=true
dht_tokens_dir="${dht_conf_root}/trigger.tokens"
dht_supported_cmds="add
remove
list
all
tag
git-branch
git-tag"
dht_version="1.0.1"

if $dht_nossl; then
  dht_curl_nossl="--insecure"
  dht_wget_nossl="--no-check-certificate"
fi

_dht_check_depends ()
{
  if [ ! "$(command -v wget)" ] && [ ! "$(command -v curl)" ]; then
    echo "error: curl or wget not found. This script requires either the 'curl' or 'wget' program."
    exit 1
  fi
  [ "$(command -v wget)" ] && wget=true
  [ "$(command -v curl)" ] && curl=true
}

# Trigger Funcs
_trigger_with_json ()
{
  http_post_string="$1"

  if $wget; then
    wget $dht_wget_nossl -O - --header="Content-Type: application/json" --post-data="$http_post_string" https://registry.hub.docker.com/u/${dockerhub_user}/${dockerhub_repo}/trigger/${trigger_token}/

  elif $curl; then
    curl $dht_curl_nossl -sS -H "Content-Type: application/json" --data "$http_post_string" -X POST https://registry.hub.docker.com/u/${dockerhub_user}/${dockerhub_repo}/trigger/${trigger_token}/
  fi
}

# Trigger all tags/branchs for this automated build.
_trigger_docker_tag_all ()
{
  _trigger_with_json "{\"build\": true}"
}

# Trigger by docker tag name
_trigger_docker_tag ()
{
  docker_tag_name="$1"
  _trigger_with_json "{\"docker_tag_name\": \"$docker_tag_name\"}"
}

# Trigger all builds which match git repo source branch named staging
_trigger_src_git_branch_matches ()
{
  src_git_branch="$1"
  _trigger_with_json "{\"source_type\": \"Branch\", \"source_name\": \"$src_git_branch\"}"
}

# Trigger all builds which match git repo source tag named v1.1
_trigger_src_git_tag_matches ()
{
  src_git_tag="$1"
  _trigger_with_json "{\"source_type\": \"Tag\", \"source_name\": \"$src_git_tag\"}"
}

_add ()
{
  if [ ! "$1" ]; then
    echo "error: No dockerhub build trigger token specified."
    echo "usage: dh-trigger add user/repo \"trigger-token\""
    exit 1
  fi
  trigger_token="$1"

  # Create a chmod 600 file and copy your trigger key into it
  trigger_token_file="${dht_tokens_dir}/${dockerhub_user}/${dockerhub_repo}"

  mkdir -p "${dht_tokens_dir}/${dockerhub_user}"

  if [ "$(command -v install)" ]; then
    install -d -m 0700 "${dht_tokens_dir}/${dockerhub_user}"
  else
    mkdir -p   "${dht_tokens_dir}/${dockerhub_user}"
    chmod 0700 "${dht_tokens_dir}/${dockerhub_user}"
  fi

  touch "$trigger_token_file"
  chmod 0600 "$trigger_token_file"
  echo "$trigger_token" > "$trigger_token_file"
}

_remove ()
{
  # Create a chmod 600 file and copy your trigger key into it
  trigger_token_file="${dht_tokens_dir}/${dockerhub_user}/${dockerhub_repo}"
  rm -rf "$trigger_token_file"

  if [ -d "${dht_tokens_dir}/${dockerhub_user}" ] && [ ! "$(ls -A "${dht_tokens_dir}/${dockerhub_user}")" ]; then
    rm -rf "${dht_tokens_dir}/${dockerhub_user}"
  fi
}

_list ()
{
  find "$dht_tokens_dir" -type f | sed -e "s|$dht_tokens_dir/||"
}

_check_trigger_token ()
{
  if ! [ -e "$trigger_token_file" ]; then
    echo "error: The file: '$trigger_token_file' was not found."
    echo "it should be chmod 600 and contain your build trigger api key"
    exit 1
  fi

  trigger_token="$(cat "$trigger_token_file")"

  if [ ! "$trigger_token" ] || [ "$trigger_token" = "01234567-89ab-cdef-0123-456789abcdef" ]; then
    echo "error: The file: '$trigger_token_file' does not container a valid dockerhub build trigger token."
    exit 1
  fi
}

_all ()
{
  _check_trigger_token;
  _trigger_docker_tag_all;
}

_tag ()
{
  if [ ! "$1" ]; then
    echo "error: No dockerhub image tag specified."
    echo "usage: dh-trigger tag user/repo \"<dockerhub-tag>\""
    exit 1
  fi

  _check_trigger_token;
  _trigger_docker_tag "$@";
}

_git_branch ()
{
  if [ ! "$1" ]; then
    echo "error: No git branch specified."
    echo "usage: dh-trigger git-branch user/repo \"<git-branch>\""
    exit 1
  fi

  _check_trigger_token;
  _trigger_src_git_branch_matches "$@";
}

_git_tag ()
{
  if [ ! "$1" ]; then
    echo "error: No git tag specified."
    echo "usage: dh-trigger git-tag user/repo \"<git-tag>\""
    exit 1
  fi

  _check_trigger_token;
  _trigger_src_git_tag_matches "$@";
}



_dht_cat_help ()
{
  cat <<- "EOF"

 dh-trigger:
      Dockerhub trigger tool. Build new docker images (build triggers).

 Usage:
      $ dht <cmd> <user>/<repo> [args]

 Configure:
      add        - Add a new build trigger & trigger token
      remove     - Remove a build trigger
      list       - List available build triggers

 Build Triggers:
      all        - Trigger a new build of all dockerhub tags
      tag        - Trigger a new build on the specified dockerhub tag
      git-branch - Trigger a new build on all tags matching src git branch
      git-tag    - Trigger a new build on all tags matching src git tag

 Examples:

      dh-trigger add dreamcat4/nginx "$trigger_token"
      dh-trigger list
      dh-trigger all dreamcat4/nginx
      dh-trigger tag dreamcat4/nginx "latest"
      dh-trigger git-branch dreamcat4/nginx "master"
      dh-trigger git-tag dreamcat4/nginx "v4.0.1.0"
      dh-trigger remove dreamcat4/nginx

 Options:
      -v,--version   - Print the current version of drb and exit.
      -h,--help      - Display this message and exit.

EOF

  printf " Version:\n"
  printf "      $dht_version\n"
  echo
}


_dht_parse_run_args ()
{
  if [ "$#" -lt "1" ]; then
    _dht_cat_help;
    exit 1;
  fi

  # for arg in "$@"; do
  while [ "$1" ]; do
    arg="$1"
    case "$arg" in

      -v|--version)
        echo "Dockerhub trigger tool - version ${dht_version}."
        exit 1
      ;;

      -h|--help)
        _dht_cat_help
        exit 1
      ;;

      -l|--list|list)
        _list
        exit 0
      ;;

      *)
        if echo "$dht_supported_cmds" | grep -q -x "$arg"; then
          _cmd="$(echo "$arg" | sed -e "s/-/_/g")"
          unset _parse_cmds

          shift
          if [ ! "$1" ]; then
            echo "error: no dockerhub username/repo speficied."
            echo "usage: dh-trigger <cmd> <user>/<repo> [args]"
            exit 1
          fi

          if [ ! "$1" ]; then
            echo "error: no dockerhub username/repo speficied."
            echo "usage: dh-trigger <cmd> <user>/<repo> [args]"
            exit 1
          fi

          if [ ! "$(echo "$1" | grep -o '/')" = "/" ] || [ "$1" != "${1#/}" ] || [ "$1" != "${1%/}" ]; then
            echo "error: dockerhub username/repo incorrect syntax detected."
            echo "usage: dh-trigger <cmd> <user>/<repo> [args]"
            exit 1
          fi

          dockerhub_user="$(dirname  "$1")"
          dockerhub_repo="$(basename "$1")"

          # Your trigger key should be kept in a file chmod 600
          trigger_token_file="${dht_tokens_dir}/${dockerhub_user}/${dockerhub_repo}"

          [ "$1" ] && shift
          eval "_$_cmd \"$@\""

        else
          echo "error: command \"$arg\" not recognised."
        fi
      ;;
    esac
    [ "$1" ] && shift
  done
}

_dht_main ()
{
  _dht_check_depends;
  _dht_parse_run_args "$@";
}
_dht_main "$@"



